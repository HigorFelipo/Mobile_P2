import React, { useState, useEffect } from 'react';
import { View, Text, TextInput, Picker, Switch, Button, ScrollView, Pressable, Image, StyleSheet } from 'react-native';

const App = () => {
  const [nome, setNome] = useState('');
  const [idade, setIdade] = useState('');
  const [sexo, setSexo] = useState('Masculino');
  const [escolaridade, setEscolaridade] = useState('Ensino Médio');
  const [fatecano, setFatecano] = useState(false);
  const [matricula, setMatricula] = useState('');
  const [contadorAlunos, setContadorAlunos] = useState(0);
  const [modoNoturno, setModoNoturno] = useState(false);
  const [tarefa, setTarefa] = useState('');
  const [cep, setCep] = useState('');
  const [endereco, setEndereco] = useState('');
  const [exibirMensagem, setExibirMensagem] = useState(false);

  useEffect(() => {
    if (modoNoturno) {
      document.body.style.backgroundColor = '#333';
      document.body.style.color = '#fff';
    } else {
      document.body.style.backgroundColor = '#fff';
      document.body.style.color = '#333';
    }
  }, [modoNoturno]);

  const salvarDados = () => {
    setExibirMensagem(true);
    console.log('Dados salvos:', { nome, idade, sexo, escolaridade, fatecano, tarefa, matricula });
    // Limpar os dados após salvar
    setNome('');
    setIdade('');
    setSexo('Masculino');
    setEscolaridade('Ensino Médio');
    setFatecano(false);
    setMatricula('');
    setTarefa('');
    setEndereco('');
  };

  const adicionarTarefa = (descricao) => {
    setTarefa(descricao);
  };

  const consultarCep = async () => {
    try {
      const response = await fetch(`https://viacep.com.br/ws/${cep}/json/`);
      const data = await response.json();
      setEndereco(data.logradouro || 'Endereço não encontrado');
    } catch (error) {
      console.error('Erro ao consultar o CEP:', error.message);
      setEndereco('Endereço não encontrado');
    }
  };

  return (
    <ScrollView style={modoNoturno ? styles.containerDark : styles.containerLight}>
      <Text style={modoNoturno ? styles.sectionHeaderDark : styles.sectionHeaderLight}>
        Perfil de Aluno
      </Text>
      {/* Incluindo a foto do aluno do GitHub */}
      <Image
        source={{ uri: 'https://avatars.githubusercontent.com/seu_usuario_do_github' }}
        style={styles.avatar}
      />
      <View style={styles.profileContainer}>
        <TextInput
          placeholder="Nome"
          value={nome}
          onChangeText={text => setNome(text)}
          style={styles.input}
        />
        <TextInput
          placeholder="Idade"
          value={idade}
          onChangeText={text => setIdade(text)}
          keyboardType="numeric"
          style={styles.input}
        />
        <Picker
          selectedValue={sexo}
          onValueChange={itemValue => setSexo(itemValue)}
          style={styles.input}
        >
          <Picker.Item label="Masculino" value="Masculino" />
          <Picker.Item label="Feminino" value="Feminino" />
        </Picker>
        <Picker
          selectedValue={escolaridade}
          onValueChange={itemValue => setEscolaridade(itemValue)}
          style={styles.input}
        >
          <Picker.Item label="Ensino Médio" value="Ensino Médio" />
          <Picker.Item label="Ensino Superior" value="Ensino Superior" />
        </Picker>
        <TextInput
          placeholder="Matrícula"
          value={matricula}
          onChangeText={text => setMatricula(text)}
          style={styles.input}
        />
        <View style={styles.switchContainer}>
          <Text>Fatecano</Text>
          <Switch value={fatecano} onValueChange={() => setFatecano(!fatecano)} />
        </View>
        <Button title="Confirmar" onPress={salvarDados} />
        {exibirMensagem && (
          <Text style={styles.mensagem}>Perfil incluído com sucesso!</Text>
        )}
        {tarefa !== '' && tarefa !== 'Realizar Ronda' && (
          <Text style={styles.tarefa}>Tarefa: {tarefa}</Text>
        )}
        {endereco !== '' && <Text style={styles.endereco}>Endereço: {endereco}</Text>}
      </View>

      <Text style={modoNoturno ? styles.sectionHeaderDark : styles.sectionHeaderLight}>
        Contador de Alunos
      </Text>
      <Text>Contador: {contadorAlunos}</Text>
      <Pressable onPress={() => setContadorAlunos(contadorAlunos + 1)}>
        <Text style={styles.button}>Incrementar Contador</Text>
      </Pressable>
      <Pressable onPress={() => setContadorAlunos(contadorAlunos - 1)}>
        <Text style={styles.button}>Decrementar Contador</Text>
      </Pressable>

      <Text style={modoNoturno ? styles.sectionHeaderDark : styles.sectionHeaderLight}>
        Switch Dia e Noite
      </Text>
      <Switch value={modoNoturno} onValueChange={() => setModoNoturno(!modoNoturno)} />
      <Text>{modoNoturno ? 'Modo Noturno' : 'Modo Dia'}</Text>

      <Text style={modoNoturno ? styles.sectionHeaderDark : styles.sectionHeaderLight}>
        Lista de Tarefas
      </Text>
      <View style={styles.tarefasContainer}>
        <Pressable onPress={() => adicionarTarefa('Realizar Ronda')}>
          <Text style={styles.button}>Realizar Ronda</Text>
        </Pressable>
        <Pressable onPress={() => adicionarTarefa('Controlar Fila')}>
          <Text style={styles.button}>Controlar Fila</Text>
        </Pressable>
      </View>
      {/* <Pressable onPress={adicionarTarefa}>
        <Text style={styles.button}>Adicionar Tarefa</Text>
      </Pressable> */}
      {/* {tarefa !== '' && <Text style={styles.tarefa}>Tarefa: {tarefa}</Text>} */}

      <Text style={modoNoturno ? styles.sectionHeaderDark : styles.sectionHeaderLight}>
        Consulta de CEP
      </Text>
      <TextInput
        placeholder="Digite o CEP"
        value={cep}
        onChangeText={text => setCep(text)}
        keyboardType="numeric"
        style={styles.input}
      />
      <Pressable onPress={consultarCep}>
        <Text style={styles.button}>Consultar CEP</Text>
      </Pressable>
      {endereco !== '' && <Text style={styles.endereco}>Endereço: {endereco}</Text>}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  containerLight: {
    flex: 1,
    backgroundColor: '#fff',
    padding: 16,
  },
  containerDark: {
    flex: 1,
    backgroundColor: '#333',
    padding: 16,
  },
  profileContainer: {
    marginBottom: 20,
  },
  tarefasContainer: {
    marginBottom: 10,
  },
  input: {
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    marginBottom: 10,
    paddingHorizontal: 10,
    color: '#333', // Cor do texto padrão
  },
  switchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 10,
  },
  sectionHeaderLight: {
    fontSize: 20,
    fontWeight: 'bold',
    marginTop: 20,
    marginBottom: 10,
    color: '#333', // Cor do texto no modo dia
  },
  sectionHeaderDark: {
    fontSize: 20,
    fontWeight: 'bold',
    marginTop: 20,
    marginBottom: 10,
    color: '#fff', // Cor do texto no modo noturno
  },
  avatar: {
    width: 100,
    height: 100,
    borderRadius: 50,
    marginBottom: 10,
  },
  button: {
    backgroundColor: '#4285f4',
    color: '#fff',
    padding: 10,
    marginVertical: 5,
    textAlign: 'center',
  },
  mensagem: {
    color: '#4285f4',
    fontSize: 16,
    textAlign: 'center',
    marginTop: 10,
  },
  tarefa: {
    color: '#333',
    fontSize: 16,
    marginTop: 10,
  },
  endereco: {
    color: '#333',
    fontSize: 16,
    marginTop: 10,
  },
});

export default App;
